# -*- coding: utf-8 -*-
"""time_series_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lEoRc9ej9BUCGRXVp7ih7U3uNRAJ3JUA
"""

import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.arima.model import ARIMA

def decompose_time_series(df, column, freq='M'):
    """
    Decomposes the time series into trend, seasonality, and residuals.

    Args:
    df: DataFrame containing the time series data
    column: The column to perform the time series analysis on (e.g., 'sales')
    freq: Frequency of the data ('M' for monthly)

    Returns:
    Decomposed components plot
    """
    df = df.set_index('month')
    decomposition = seasonal_decompose(df[column], model='additive', period=freq)
    decomposition.plot()
    plt.show()

def forecast_sales(df, column, order=(1, 1, 1), steps=12):
    """
    Forecast future sales using ARIMA model.

    Args:
    df: DataFrame containing the time series data
    column: The column to forecast (e.g., 'sales')
    order: ARIMA model parameters (p, d, q)
    steps: Number of months to forecast

    Returns:
    Forecast values
    """
    df = df.set_index('month')
    model = ARIMA(df[column], order=order)
    model_fit = model.fit()
    forecast = model_fit.forecast(steps=steps)

    # Plot forecast
    plt.figure(figsize=(10,6))
    plt.plot(df[column], label='Historical Data')
    plt.plot(forecast, label='Forecasted Data', color='red')
    plt.legend()
    plt.show()

    return forecast

    from time_series_analysis import decompose_time_series, forecast_sales

    # Decompose time series for sales
    decompose_time_series(df, 'sales')

    # Forecast future sales
    forecast = forecast_sales(df, 'sales')