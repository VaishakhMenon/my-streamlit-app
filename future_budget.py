# -*- coding: utf-8 -*-
"""future_budget.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lEoRc9ej9BUCGRXVp7ih7U3uNRAJ3JUA
"""

def calculate_efficiency(df):
    """
    Calculate the efficiency of each strategy in terms of sales per dollar spent.

    Args:
    df: DataFrame containing the sales and strategy expenditure

    Returns:
    A dictionary of strategy efficiencies
    """
    efficiency = {
        'strategy1_efficiency': df['sales'].sum() / df['strategy1'].sum(),
        'strategy2_efficiency': df['sales'].sum() / df['strategy2'].sum(),
        'strategy3_efficiency': df['sales'].sum() / df['strategy3'].sum(),
    }

    return efficiency

def reallocate_budget(df, total_budget):
    """
    Simulate reallocation of resources from the least efficient strategy to the most efficient ones.

    Args:
    df: DataFrame containing the sales and strategy expenditure
    total_budget: Total future budget to be allocated

    Returns:
    New budget allocation across strategies
    """
    efficiency = calculate_efficiency(df)

    # Sort by efficiency to identify the best-performing strategy
    sorted_efficiency = sorted(efficiency.items(), key=lambda x: x[1], reverse=True)

    # Reallocate budget based on efficiency
    total_efficiency = sum([eff[1] for eff in sorted_efficiency])

    budget_allocation = {}
    for strategy, eff in sorted_efficiency:
        proportion = eff / total_efficiency
        budget_allocation[strategy] = total_budget * proportion

    return budget_allocation


    from future_budget import reallocate_budget

    # Simulate budget reallocation based on efficiency
    
    total_future_budget = 30_000_000  # Example future budget
    new_budget_allocation = reallocate_budget(df, total_future_budget)
    print(new_budget_allocation)